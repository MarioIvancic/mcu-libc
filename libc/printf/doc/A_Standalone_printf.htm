<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US"><head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>A Standalone printf() for Early Bootup «  pagetable.com</title>

<link rel="stylesheet" href="A_Standalone_printf_files/style.css" type="text/css" media="screen">
<link rel="pingback" href="http://www.pagetable.com/xmlrpc.php">

<style type="text/css" media="screen">

	#page { background: url("http://www.pagetable.com/wp-content/themes/default/images/kubrickbgwide.jpg") repeat-y top; border: none; }

</style>


<link rel="alternate" type="application/rss+xml" title="pagetable.com » Feed" href="http://www.pagetable.com/?feed=rss2">
<link rel="alternate" type="application/rss+xml" title="pagetable.com » Comments Feed" href="http://www.pagetable.com/?feed=comments-rss2">
<link rel="alternate" type="application/rss+xml" title="pagetable.com » A Standalone printf() for Early Bootup Comments Feed" href="http://www.pagetable.com/?feed=rss2&amp;p=298">
<script type="text/javascript" src="A_Standalone_printf_files/comment-reply.js"></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.pagetable.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.pagetable.com/wp-includes/wlwmanifest.xml"> 
<link rel="index" title="pagetable.com" href="http://www.pagetable.com/">
<link rel="start" title="First assembly puzzle!" href="http://www.pagetable.com/?p=4">
<link rel="prev" title="Pictures of Apple Lisa 2 Boards" href="http://www.pagetable.com/?p=230">
<link rel="next" title="PCEPTPDPTE" href="http://www.pagetable.com/?p=308">
<meta name="generator" content="WordPress 3.0.1">
<link rel="canonical" href="http://www.pagetable.com/?p=298">
</head>
<body class="single single-post postid-298">
<div id="page">


<div id="header" role="banner">
	<div id="headerimg">
		<h1><a href="http://www.pagetable.com/">pagetable.com</a></h1>
		<div class="description">Some Assembly Required</div>
	</div>
</div>
<hr>

	<div id="content" class="widecolumn" role="main">

	
		<div class="navigation">
			<div class="alignleft">« <a href="http://www.pagetable.com/?p=230" rel="prev">Pictures of Apple Lisa 2 Boards</a></div>
			<div class="alignright"><a href="http://www.pagetable.com/?p=308" rel="next">PCEPTPDPTE</a> »</div>
		</div>

		<div class="post-298 post type-post hentry category-tricks" id="post-298">
			<h2>A Standalone printf() for Early Bootup</h2>

			<div class="entry">
				<p>A while ago, I complained about operating systems with overly complicated startup code that <a href="http://www.pagetable.com/?p=276">spends too much time in assembly</a> and does hot have printf() or framebuffer access until very late.</p>
<p>This second post is about printf(): Many systems use POST codes (on 
i386/x86_64, i.e. writes to port 0×80) or debug LED for debugging, or 
have complicated and cumbersome implementations for puts() and 
print_hex() – and printf() is only available very late, because it has 
some special requirement, like console channels being set up. But 
printf() is not rocket science: Al it needs is C and a stack. Whatever 
system you are bringing up on whatever platform: Having printf() as 
early as possible will prove very useful.</p>
<p>Today, I am presenting a full-featured standalone version of printf()
 that can be added to arbitrary 32 or 64 bit C code. The code has been 
taken from FreeBSD (<a href="http://www.freebsd.org/cgi/cvsweb.cgi/src/sys/kern/subr_prf.c">sys/kern/subr_prf.c</a>) and is therefore BSD-licensed. Unnecessary functions have been removed and all typedefs required have been added.</p>
<pre>/*-
 * Copyright (c) 1986, 1988, 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)subr_prf.c	8.3 (Berkeley) 1/21/94
 */

typedef unsigned long size_t;
typedef long ssize_t;
#ifdef __64BIT__
typedef unsigned long long uintmax_t;
typedef long long intmax_t;
#else
typedef unsigned int uintmax_t;
typedef int intmax_t;
#endif
typedef unsigned char u_char;
typedef unsigned int u_int;
typedef unsigned long u_long;
typedef unsigned short u_short;
typedef unsigned long long u_quad_t;
typedef long long quad_t;
typedef unsigned long uintptr_t;
typedef long ptrdiff_t;
#define NULL ((void*)0)
#define NBBY    8               /* number of bits in a byte */
char const hex2ascii_data[] = "0123456789abcdefghijklmnopqrstuvwxyz";
#define hex2ascii(hex)  (hex2ascii_data[hex])
#define va_list __builtin_va_list
#define va_start __builtin_va_start
#define va_arg __builtin_va_arg
#define va_end __builtin_va_end
#define toupper(c)      ((c) - 0x20 * (((c) &gt;= 'a') &amp;&amp; ((c) &lt;= 'z')))
static size_t
strlen(const char *s)
{
	size_t l = 0;
	while (*s++)
		l++;
	return l;
}

/* Max number conversion buffer length: a u_quad_t in base 2, plus NUL byte. */
#define MAXNBUF	(sizeof(intmax_t) * NBBY + 1)

/*
 * Put a NUL-terminated ASCII number (base &lt;= 36) in a buffer in reverse
 * order; return an optional length and a pointer to the last character
 * written in the buffer (i.e., the first character of the string).
 * The buffer pointed to by `nbuf' must have length &gt;= MAXNBUF.
 */
static char *
ksprintn(char *nbuf, uintmax_t num, int base, int *lenp, int upper)
{
	char *p, c;

	p = nbuf;
	*p = '\0';
	do {
		c = hex2ascii(num % base);
		*++p = upper ? toupper(c) : c;
	} while (num /= base);
	if (lenp)
		*lenp = p - nbuf;
	return (p);
}

/*
 * Scaled down version of printf(3).
 *
 * Two additional formats:
 *
 * The format %b is supported to decode error registers.
 * Its usage is:
 *
 *	printf("reg=%b\n", regval, "<!-- base href="http://www.pagetable.com/?p=298" --><arg>*");
 *
 * where <!-- base href="http://www.pagetable.com/?p=298" --> is the output base expressed as a control character, e.g.
 * \10 gives octal; \20 gives hex.  Each arg is a sequence of characters,
 * the first of which gives the bit number to be inspected (origin 1), and
 * the next characters (up to a control character, i.e. a character &lt;= 32),
 * give the name of the register.  Thus:
 *
 *	kvprintf("reg=%b\n", 3, "\10\2BITTWO\1BITONE\n");
 *
 * would produce output:
 *
 *	reg=3<bittwo,bitone>
 *
 * XXX:  %D  -- Hexdump, takes pointer and separator string:
 *		("%6D", ptr, ":")   -&gt; XX:XX:XX:XX:XX:XX
 *		("%*D", len, ptr, " " -&gt; XX XX XX XX ...
 */
int
kvprintf(char const *fmt, void (*func)(int, void*), void *arg, int radix, va_list ap)
{
#define PCHAR(c) {int cc=(c); if (func) (*func)(cc,arg); else *d++ = cc; retval++; }
	char nbuf[MAXNBUF];
	char *d;
	const char *p, *percent, *q;
	u_char *up;
	int ch, n;
	uintmax_t num;
	int base, lflag, qflag, tmp, width, ladjust, sharpflag, neg, sign, dot;
	int cflag, hflag, jflag, tflag, zflag;
	int dwidth, upper;
	char padc;
	int stop = 0, retval = 0;

	num = 0;
	if (!func)
		d = (char *) arg;
	else
		d = NULL;

	if (fmt == NULL)
		fmt = "(fmt null)\n";

	if (radix &lt; 2 || radix &gt; 36)
		radix = 10;

	for (;;) {
		padc = ' ';
		width = 0;
		while ((ch = (u_char)*fmt++) != '%' || stop) {
			if (ch == '\0')
				return (retval);
			PCHAR(ch);
		}
		percent = fmt - 1;
		qflag = 0; lflag = 0; ladjust = 0; sharpflag = 0; neg = 0;
		sign = 0; dot = 0; dwidth = 0; upper = 0;
		cflag = 0; hflag = 0; jflag = 0; tflag = 0; zflag = 0;
reswitch:	switch (ch = (u_char)*fmt++) {
		case '.':
			dot = 1;
			goto reswitch;
		case '#':
			sharpflag = 1;
			goto reswitch;
		case '+':
			sign = 1;
			goto reswitch;
		case '-':
			ladjust = 1;
			goto reswitch;
		case '%':
			PCHAR(ch);
			break;
		case '*':
			if (!dot) {
				width = va_arg(ap, int);
				if (width &lt; 0) {
					ladjust = !ladjust;
					width = -width;
				}
			} else {
				dwidth = va_arg(ap, int);
			}
			goto reswitch;
		case '0':
			if (!dot) {
				padc = '0';
				goto reswitch;
			}
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
				for (n = 0;; ++fmt) {
					n = n * 10 + ch - '0';
					ch = *fmt;
					if (ch &lt; '0' || ch &gt; '9')
						break;
				}
			if (dot)
				dwidth = n;
			else
				width = n;
			goto reswitch;
		case 'b':
			num = (u_int)va_arg(ap, int);
			p = va_arg(ap, char *);
			for (q = ksprintn(nbuf, num, *p++, NULL, 0); *q;)
				PCHAR(*q--);

			if (num == 0)
				break;

			for (tmp = 0; *p;) {
				n = *p++;
				if (num &amp; (1 &lt;&lt; (n - 1))) {
					PCHAR(tmp ? ',' : '&lt;');
					for (; (n = *p) &gt; ' '; ++p)
						PCHAR(n);
					tmp = 1;
				} else
					for (; *p &gt; ' '; ++p)
						continue;
			}
			if (tmp)
				PCHAR('&gt;');
			break;
		case 'c':
			PCHAR(va_arg(ap, int));
			break;
		case 'D':
			up = va_arg(ap, u_char *);
			p = va_arg(ap, char *);
			if (!width)
				width = 16;
			while(width--) {
				PCHAR(hex2ascii(*up &gt;&gt; 4));
				PCHAR(hex2ascii(*up &amp; 0x0f));
				up++;
				if (width)
					for (q=p;*q;q++)
						PCHAR(*q);
			}
			break;
		case 'd':
		case 'i':
			base = 10;
			sign = 1;
			goto handle_sign;
		case 'h':
			if (hflag) {
				hflag = 0;
				cflag = 1;
			} else
				hflag = 1;
			goto reswitch;
		case 'j':
			jflag = 1;
			goto reswitch;
		case 'l':
			if (lflag) {
				lflag = 0;
				qflag = 1;
			} else
				lflag = 1;
			goto reswitch;
		case 'n':
			if (jflag)
				*(va_arg(ap, intmax_t *)) = retval;
			else if (qflag)
				*(va_arg(ap, quad_t *)) = retval;
			else if (lflag)
				*(va_arg(ap, long *)) = retval;
			else if (zflag)
				*(va_arg(ap, size_t *)) = retval;
			else if (hflag)
				*(va_arg(ap, short *)) = retval;
			else if (cflag)
				*(va_arg(ap, char *)) = retval;
			else
				*(va_arg(ap, int *)) = retval;
			break;
		case 'o':
			base = 8;
			goto handle_nosign;
		case 'p':
			base = 16;
			sharpflag = (width == 0);
			sign = 0;
			num = (uintptr_t)va_arg(ap, void *);
			goto number;
		case 'q':
			qflag = 1;
			goto reswitch;
		case 'r':
			base = radix;
			if (sign)
				goto handle_sign;
			goto handle_nosign;
		case 's':
			p = va_arg(ap, char *);
			if (p == NULL)
				p = "(null)";
			if (!dot)
				n = strlen (p);
			else
				for (n = 0; n &lt; dwidth &amp;&amp; p[n]; n++)
					continue;

			width -= n;

			if (!ladjust &amp;&amp; width &gt; 0)
				while (width--)
					PCHAR(padc);
			while (n--)
				PCHAR(*p++);
			if (ladjust &amp;&amp; width &gt; 0)
				while (width--)
					PCHAR(padc);
			break;
		case 't':
			tflag = 1;
			goto reswitch;
		case 'u':
			base = 10;
			goto handle_nosign;
		case 'X':
			upper = 1;
		case 'x':
			base = 16;
			goto handle_nosign;
		case 'y':
			base = 16;
			sign = 1;
			goto handle_sign;
		case 'z':
			zflag = 1;
			goto reswitch;
handle_nosign:
			sign = 0;
			if (jflag)
				num = va_arg(ap, uintmax_t);
			else if (qflag)
				num = va_arg(ap, u_quad_t);
			else if (tflag)
				num = va_arg(ap, ptrdiff_t);
			else if (lflag)
				num = va_arg(ap, u_long);
			else if (zflag)
				num = va_arg(ap, size_t);
			else if (hflag)
				num = (u_short)va_arg(ap, int);
			else if (cflag)
				num = (u_char)va_arg(ap, int);
			else
				num = va_arg(ap, u_int);
			goto number;
handle_sign:
			if (jflag)
				num = va_arg(ap, intmax_t);
			else if (qflag)
				num = va_arg(ap, quad_t);
			else if (tflag)
				num = va_arg(ap, ptrdiff_t);
			else if (lflag)
				num = va_arg(ap, long);
			else if (zflag)
				num = va_arg(ap, ssize_t);
			else if (hflag)
				num = (short)va_arg(ap, int);
			else if (cflag)
				num = (char)va_arg(ap, int);
			else
				num = va_arg(ap, int);
number:
			if (sign &amp;&amp; (intmax_t)num &lt; 0) {
				neg = 1;
				num = -(intmax_t)num;
			}
			p = ksprintn(nbuf, num, base, &amp;tmp, upper);
			if (sharpflag &amp;&amp; num != 0) {
				if (base == 8)
					tmp++;
				else if (base == 16)
					tmp += 2;
			}
			if (neg)
				tmp++;

			if (!ladjust &amp;&amp; padc != '0' &amp;&amp; width
			    &amp;&amp; (width -= tmp) &gt; 0)
				while (width--)
					PCHAR(padc);
			if (neg)
				PCHAR('-');
			if (sharpflag &amp;&amp; num != 0) {
				if (base == 8) {
					PCHAR('0');
				} else if (base == 16) {
					PCHAR('0');
					PCHAR('x');
				}
			}
			if (!ladjust &amp;&amp; width &amp;&amp; (width -= tmp) &gt; 0)
				while (width--)
					PCHAR(padc);

			while (*p)
				PCHAR(*p--);

			if (ladjust &amp;&amp; width &amp;&amp; (width -= tmp) &gt; 0)
				while (width--)
					PCHAR(padc);

			break;
		default:
			while (percent &lt; fmt)
				PCHAR(*percent++);
			/*
			 * Since we ignore an formatting argument it is no
			 * longer safe to obey the remaining formatting
			 * arguments as the arguments will no longer match
			 * the format specs.
			 */
			stop = 1;
			break;
		}
	}
#undef PCHAR
}

static void
putchar(int c, void *arg)
{
	/* add your putchar here */
}

void
printf(const char *fmt, ...)
{
	/* http://www.pagetable.com/?p=298 */
	va_list ap;

	va_start(ap, fmt);
	kvprintf(fmt, putchar, NULL, 10, ap);
	va_end(ap);
}
</bittwo,bitone></arg></pre>
<p>One thing you will have to do is #define or #undef __64__BIT to 
enable or disable support for printing 64 bit values. If you are on a 64
 bit architecture, you will need this to print addresses properly. If 
you are on 32 bit, this support will require external library functions 
to do 64 bit arithmetic, so you probably want to turn this off.</p>
<p>On ARM, which doesn't have an assembly statement for division, will always need a library routine. You can use FreeBSD's at <a href="http://www.freebsd.org/cgi/cvsweb.cgi/src/sys/libkern/arm/divsi3.S">sys/libkern/arm/divsi3.S</a>, if you to add the following #defines to make the file compile:</p>
<pre>#define __FBSDID(a)
#define RET bx lr
#define ENTRY_NP(a) _##a: .global _##a
#define _KERNEL
</pre>
<p>All you need to do now to get printf() working is to fill the 
putchar() function, for example with a call to a serial_putc() 
implementation, if you have a serial port. On a PC, serial_putc() could 
look like this:</p>
<pre>static void outb(short p, unsigned char a)
{
        asm volatile("outb %b0, %w1" : : "a" (a), "Nd" (p));
}
static unsigned char inb(short p)
{
        unsigned char a;
        asm volatile("inb %w1, %b0" : "=a" (a) : "Nd" (p));
        return a;
}
#define SERIAL_PORT 0x3f8
static void
serial_putc(unsigned char c) {
	while (!(inb(SERIAL_PORT + 5) &amp; 0x20));
	outb(SERIAL_PORT, c);
}
</pre>
<p>On an "ARM Integrator/CP" board, the default for <a href="http://www.qemu.org/">QEMU</a>
 emulating ARM, the follwing serial_putc() would apply (make sure you 
are running the MMU off, or with the serial port MMIO region mapped):</p>
<pre>#define SERIAL_PORT 0x16000000
static void
serial_putc(unsigned char c) {
	while ((*(volatile unsigned int *)(SERIAL_PORT + 0x18)) &amp; 0x20);
	*(volatile unsigned int *)(SERIAL_PORT) = (c);
}
</pre>
<p>Unfortunately, sometimes you are bringing up or debugging a system 
that does not have a serial port - or at least you haven't found one: 
Apple Macintosh and various game systems come to mind. In this case, you
 might be able to set up a framebuffer and print to that. In a later 
post, I will present a small standalone framebuffer library.</p>
<img src="A_Standalone_printf_files/trackingpixel.gif" style="display: none;" alt="pixelstats trackingpixel">
								
				<p class="postmetadata alt">
					<small>
						This entry was posted
												on Monday, September 7th, 2009 at 18:15						and is filed under <a href="http://www.pagetable.com/?cat=5" title="View all posts in tricks" rel="category">tricks</a>.
						You can follow any responses to this entry through the <a href="http://www.pagetable.com/?feed=rss2&amp;p=298">RSS 2.0</a> feed.

													You can <a href="#respond">leave a response</a>, or <a href="http://www.pagetable.com/wp-trackback.php?p=298" rel="trackback">trackback</a> from your own site.

						
					</small>
				</p>

			</div>
		</div>

	
<!-- You can start editing here. -->

	<h3 id="comments">5 Responses to “A Standalone printf() for Early Bootup”</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ol class="commentlist">
			<li class="comment even thread-even depth-1" id="comment-100943">
				<div id="div-comment-100943" class="comment-body">
				<div class="comment-author vcard">
		<img alt="" src="A_Standalone_printf_files/5d04c0dc57ad72ce94a7504d2acc6c1a.png" class="avatar avatar-32 photo" width="32" height="32">		<cite class="fn">chrisb</cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://www.pagetable.com/?p=298&amp;cpage=1#comment-100943">
			11. September 2009 at 10:52</a>		</div>

		<p>Why didn’t I think of this instead of writing the damn thing from scratch…</p>

		<div class="reply">
				</div>
				</div>
		</li>
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-100950">
				<div id="div-comment-100950" class="comment-body">
				<div class="comment-author vcard">
		<img alt="" src="A_Standalone_printf_files/b98cbaf0e9d8ba471df542dd626fc878.png" class="avatar avatar-32 photo" width="32" height="32">		<cite class="fn">tlambert</cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://www.pagetable.com/?p=298&amp;cpage=1#comment-100950">
			14. September 2009 at 20:07</a>		</div>

		<p>You should use the “Division by Invariant Integers Using 
Multiplication” algorithm from the 1994 paper by TorbjĂśrn Granlund ,  
Peter L. Montgomery; it’d be a lot smaller than the code FreeBSD uses, 
and most likely faster.</p>

		<div class="reply">
				</div>
				</div>
		</li>
		<li class="comment even thread-even depth-1" id="comment-100954">
				<div id="div-comment-100954" class="comment-body">
				<div class="comment-author vcard">
		<img alt="" src="A_Standalone_printf_files/37957462a0f6f409b0b23afcc0b7aa4c.png" class="avatar avatar-32 photo" width="32" height="32">		<cite class="fn">Segher</cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://www.pagetable.com/?p=298&amp;cpage=1#comment-100954">
			16. September 2009 at 2:02</a>		</div>

		<p>If you want a really small printf(), you can use my code at</p>
<p><a href="http://git.infradead.org/users/segher/savezelda.git/blob/HEAD:/loader/console.c" rel="nofollow">http://git.infradead.org/users/segher/savezelda.git/blob/HEAD:/loader/console.c</a></p>
<p>It works for 64-bit numbers without needing umoddi3 etc.; it does use single-integer<br>
division though, it was written for PowerPC.  Easy enough to get rid of it.  There also<br>
are some “missing features” that nobody will miss, heh.</p>

		<div class="reply">
				</div>
				</div>
		</li>
		<li class="pingback odd alt thread-odd thread-alt depth-1" id="comment-100972">
				<div id="div-comment-100972" class="comment-body">
				<div class="comment-author vcard">
				<cite class="fn"><a href="http://www.pagetable.com/?p=276" rel="external nofollow" class="url">Minimizing the Assembly needed for Machine Initialization « pagetable.com</a></cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://www.pagetable.com/?p=298&amp;cpage=1#comment-100972">
			21. September 2009 at 12:36</a>		</div>

		<p>[...] operating systems, I have seen overly complicated startup 
code. Too much is done in assembly, and printf() and framebuffer access 
is only available very late. In the next three blog posts, I will show 
how [...]</p>

		<div class="reply">
				</div>
				</div>
		</li>
		<li class="comment even thread-even depth-1" id="comment-101015">
				<div id="div-comment-101015" class="comment-body">
				<div class="comment-author vcard">
		<img alt="" src="A_Standalone_printf_files/357a20e8c56e69d6f9734d23ef9517e8.png" class="avatar avatar-32 photo" width="32" height="32">		<cite class="fn">Robert</cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://www.pagetable.com/?p=298&amp;cpage=1#comment-101015">
			21. October 2009 at 12:46</a>		</div>

		<p>Segher,</p>
<p>Very neat. I see it doesn’t have the full feature set but nevertheless it looks very small and optimized.</p>
<p>It makes you wonder about the technical quality of code written by the big corporations and institutes.</p>

		<div class="reply">
				</div>
				</div>
		</li>
	</ol>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>
 


<div id="respond">

<h3>Leave a Reply</h3>

<div class="cancel-comment-reply">
	<small><a rel="nofollow" id="cancel-comment-reply-link" href="http://www.pagetable.com/?p=298#respond" style="display: none;">Click here to cancel reply.</a></small>
</div>


<form action="http://www.pagetable.com/wp-comments-post.php" method="post" id="commentform">


<p><input name="author" id="author" size="22" tabindex="1" aria-required="true" type="text">
<label for="author"><small>Name (required)</small></label></p>

<p><input name="email" id="email" size="22" tabindex="2" aria-required="true" type="text">
<label for="email"><small>Mail (will not be published) (required)</small></label></p>

<p><input name="url" id="url" size="22" tabindex="3" type="text">
<label for="url"><small>Website</small></label></p>


<!--<p><small><strong>XHTML:</strong> You can use these tags: <code>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </code></small></p>-->

<div style="display:block;" id="secureimgdiv">
				<p><label for="securitycode">Anti-spam word: (Required)</label><span style="color:#FF0000;">*</span><br>
				<small>To prove you're a person (not a spam script), type the 
security word shown in the picture. Click on the picture to hear an 
audio file of the word.</small><br>
				<input name="securitycode" id="securitycode" size="30" tabindex="4" type="text">
				<input id="cas_match" name="matchthis" value="1049668" type="hidden">
				<a id="cas_link" href="http://www.pagetable.com/wp-content/plugins/custom-anti-spam/custom_anti_spam.php?audioselect=1049668" rel="nofollow" title="Click to hear an audio file of the anti-spam word">
				<img id="cas_image" src="A_Standalone_printf_files/custom_anti_spam.jpg" alt="Click to hear an audio file of the anti-spam word" style="border: 1px solid black; vertical-align: top; height: 50px; width: 160px;"></a></p>
			</div><p><textarea name="comment" id="comment" cols="100%" rows="10" tabindex="4"></textarea></p>

<p><input name="submit" id="submit" tabindex="5" value="Submit Comment" type="submit">
<input name="comment_post_ID" value="298" id="comment_post_ID" type="hidden">
<input name="comment_parent" id="comment_parent" value="0" type="hidden">
</p>
			
			<script language="JavaScript" type="text/javascript">
            <!--
                var commentinput = document.getElementById("comment").parentNode;
                var submitp = commentinput.parentNode;
                var substitution2 = document.getElementById("secureimgdiv");
                submitp.insertBefore(substitution2, commentinput);
            // -->
            </script>

</form>

</div>


	
	</div>


<hr>
<div id="footer" role="contentinfo">
<!-- If you'd like to support WordPress, having the "powered by" link somewhere on your blog is the best way; it's our only promotion or advertising. -->
	<p>
		pagetable.com is proudly powered by
		<a href="http://wordpress.org/">WordPress</a>
		<br><a href="http://www.pagetable.com/?feed=rss2">Entries (RSS)</a>
		and <a href="http://www.pagetable.com/?feed=comments-rss2">Comments (RSS)</a>.
		<!-- 21 queries. 0.311 seconds. -->
	</p>
</div>
</div>

<!-- Gorgeous design by Michael Heilemann - http://binarybonsai.com/kubrick/ -->

		

</body></html>