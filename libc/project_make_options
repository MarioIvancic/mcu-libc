# Project specific libc options

# itoa, ltoa, lltoa, uitoa, ultoa, ulltoa options
# enable fast conversion for common base (2, 8, 10, 16)
PROJECT_OPTIONS += -DITOA_ENABLE_FAST_HEX
PROJECT_OPTIONS += -DITOA_ENABLE_FAST_DEC
#PROJECT_OPTIONS += -DITOA_ENABLE_FAST_OCT
#PROJECT_OPTIONS += -DITOA_ENABLE_FAST_BIN

# memcpy, memcpy, memcmp, memchr options
#PROJECT_OPTIONS += -DLIBC_MEMCCPY_OPTIMIZE_SIZE
PROJECT_OPTIONS += -DLIBC_MEMCCPY_OPTIMIZE_SPEED
#PROJECT_OPTIONS += -DLIBC_MEMCHR_OPTIMIZE_SIZE
#PROJECT_OPTIONS += -DLIBC_MEMCHR_OPTIMIZE_SPEED
#PROJECT_OPTIONS += -DLIBC_MEMCMP_OPTIMIZE_SIZE
PROJECT_OPTIONS += -DLIBC_MEMCMP_OPTIMIZE_SPEED
#PROJECT_OPTIONS += -DLIBC_MEMCPY_OPTIMIZE_SIZE
#PROJECT_OPTIONS += -DLIBC_MEMCPY_OPTIMIZE_SPEED
#PROJECT_OPTIONS += -DLIBC_MEMMOVE_OPTIMIZE_SIZE
#PROJECT_OPTIONS += -DLIBC_MEMMOVE_OPTIMIZE_SPEED
PROJECT_OPTIONS += -DLIBC_MEMSET_OPTIMIZE_SIZE
#PROJECT_OPTIONS += -DLIBC_MEMSET_OPTIMIZE_SPEED
PROJECT_OPTIONS += -DLIBC_STRCAT_OPTIMIZE_SIZE
#PROJECT_OPTIONS += -DLIBC_STRCAT_OPTIMIZE_SPEED
#PROJECT_OPTIONS += -DLIBC_STRCHR_OPTIMIZE_SIZE
#PROJECT_OPTIONS += -DLIBC_STRCHR_OPTIMIZE_SPEED
#PROJECT_OPTIONS += -DLIBC_STRCMP_OPTIMIZE_SIZE
#PROJECT_OPTIONS += -DLIBC_STRCMP_OPTIMIZE_SPEED
PROJECT_OPTIONS += -DLIBC_STRCPY_OPTIMIZE_SIZE
#PROJECT_OPTIONS += -DLIBC_STRCPY_OPTIMIZE_SPEED
PROJECT_OPTIONS += -DLIBC_STRLCPY_OPTIMIZE_SIZE
#PROJECT_OPTIONS += -DLIBC_STRLCPY_OPTIMIZE_SPEED
PROJECT_OPTIONS += -DLIBC_STRLEN_OPTIMIZE_SIZE
#PROJECT_OPTIONS += -DLIBC_STRLEN_OPTIMIZE_SPEED
PROJECT_OPTIONS += -DLIBC_STRNCAT_OPTIMIZE_SIZE
#PROJECT_OPTIONS += -DLIBC_STRNCAT_OPTIMIZE_SPEED
PROJECT_OPTIONS += -DLIBC_STRNCPY_OPTIMIZE_SIZE
#PROJECT_OPTIONS += -DLIBC_STRNCPY_OPTIMIZE_SPEED
PROJECT_OPTIONS += -DLIBC_STRNLEN_OPTIMIZE_SIZE
#PROJECT_OPTIONS += -DLIBC_STRNLEN_OPTIMIZE_SPEED
PROJECT_OPTIONS += -DLIBC_STRSPN_OPTIMIZE_SIZE
#PROJECT_OPTIONS += -DLIBC_STRSPN_OPTIMIZE_SPEED
#PROJECT_OPTIONS += -DLIBC_STRRCHR_USE_MEMRCHR
PROJECT_OPTIONS += -DLIBC_STRRCHR_USE_LOOP



# gmtime, localtime, asctime options
PROJECT_OPTIONS += -DTZSET_MUSL
#PROJECT_OPTIONS += -DTZSET_SIMPLE
PROJECT_OPTIONS += -DASCTIME_SNPRINF
PROJECT_OPTIONS += -DGMTIME_OPTIMIZE_SIZE
#PROJECT_OPTIONS += -DGMTIME_OPTIMIZE_SPEED
#PROJECT_OPTIONS += -DGMTIME_LOOP_DAYS

# time options
#PROJECT_OPTIONS += -DSYSTEM_TIME_USE_CLOCK_GETTIME
#PROJECT_OPTIONS += -DUSE_COMPACT_STRUCT_TM

# tiny printf options
#PROJECT_OPTIONS += -DTFP_PRINTF_ENABLE_LONGLONG
#PROJECT_OPTIONS += -DTFP_PRINTF_ENABLE_LONG
#PROJECT_OPTIONS += -DTFP_PRINTF_USE_SHIFT_ADD
#PROJECT_OPTIONS += -DTFP_PRINTF_USE_BUILTINS

# msp printf options
#PROJECT_OPTIONS += -DMSP_PRINTF_ENABLE_LONGLONG
#PROJECT_OPTIONS += -DMSP_PRINTF_ENABLE_LONG

# printf options
# tfp_printf have smaller memory footprint and msp_printf is closer to standard printf.
# in general case, on embedded systems we prefer small code size so we will us tfp_printf
# as default printf implementation.
# you can control it by PRINTF_USE_MSP and/or PRINTF_USE_TFP project options.
# In any case you can #include <msp_printf.h> or #include <tfp_printf.h> and use whichever you need.
#PROJECT_OPTIONS += -DPRINTF_USE_MSP
PROJECT_OPTIONS += -DPRINTF_USE_TFP


# TLSF malloc options
# Memory size available to malloc. Default is (_stack - _heap) / 2.
#PROJECT_OPTIONS += -DTLSF_MALLOC_MEMSIZE=8192
# how many bits are used for addressing memory
# 13 => 8KB, 14 =>16KB, 15 => 32KB, 16 => 64KB, 17 => 128KB
#PROJECT_OPTIONS += -DTLSF_MALLOC_FL_INDEX_BITS=15
# how many bits is used to calculate subdivisions between 2^n and 2^(n+1)
#PROJECT_OPTIONS += -DTLSF_MALLOC_SL_INDEX_BITS=2


# startup options
#PROJECT_OPTIONS += -DHAVE_INITFINI_ARRAY




