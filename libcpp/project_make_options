# project make options
# options are make variables

os_header_path = ../lib/$(CLASS_DIR)

use_external_libc = true

# Force 32-bit compilation for libcpp
force_32_bit = false

#disable_rtti = false
disable_rtti = true

#disable_exceptions = false
disable_exceptions = true

# Enable pedantic warnings
enable_pedantic = false

# Enable pedantic warnings and make them errors.
enable_pedantic_error = false

#enable_threading = true
enable_threading = false
enable_threads = false

# Use compiler_rt to supply builtin functionality
libcxx_use_compiler_rt = false

libcxx_use_llvm_libunwind = true

# choices: ['', 'none', 'pthread', 'ea-framework']
libcxx_thread_library = none

libcxx_has_external_thread_api = false

libcxx_build_external_thread_api = false

libcxx_enable_chrono = true

libcxx_enable_filesystem = false

libcxx_enable_stdinout = true

libcxx_default_newdelete = true

libcxx_silent_terminate = true

libcxx_monotonic_clock = true

# When true, use the subproject defined in the libc-subproject option. An alternate approach is to override c_stdlib in your cross files.
use_libc_subproject = false

# This array is used in combination with use_libc_subproject. The first entry is the subproject name. 
# The second is the cross-compilation dependency to use. The third value is optional. 
# If used, it is a native dependency to use with native library targets.
libc_subproject = libc libc_dep libc_hosted_native_dep
